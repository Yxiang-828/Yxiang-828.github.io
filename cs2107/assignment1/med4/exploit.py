import socket

def recv_until(sock, text):
    data = b""
    while text.encode() not in data:
        data += sock.recv(1024)
    return data.decode()

def send(sock, text):
    sock.send(text.encode() + b"\n")

# Connect
sock = socket.socket()
sock.connect(("cs2107-ctfd-i.comp.nus.edu.sg", 5003))

# Skip initial menu
print(recv_until(sock, ">> "))

# Get encrypted flag
send(sock, "2")
data = recv_until(sock, ">> ")
lines = data.split("\n")
encrypted_flag_hex = None
length = None
for line in lines:
    if "Encrypted Flag (hex):" in line:
        encrypted_flag_hex = line.split(": ")[1].strip()
    if "Length:" in line:
        length = int(line.split(": ")[1].split(" ")[0])

if encrypted_flag_hex and length:
    print(f"Encrypted Flag: {encrypted_flag_hex}")
    print(f"Length: {length}")

    # Encrypt known plaintext (same length as flag - 16 for tag)
    flag_len = length - 16
    known = b"A" * flag_len
    print(f"Sending known plaintext ({len(known)} bytes): {known.decode()}")
    send(sock, "1")
    recv_until(sock, "Enter your Tea: ")
    send(sock, known.decode())
    data = recv_until(sock, ">> ")
    lines = data.split("\n")
    encrypted_known_hex = None
    for line in lines:
        if "Encrypted Tea (hex):" in line:
            encrypted_known_hex = line.split(": ")[1].strip()

    if encrypted_known_hex:
        print(f"Encrypted Known: {encrypted_known_hex}")

        # Compute keystream
        encrypted_flag = bytes.fromhex(encrypted_flag_hex)
        encrypted_known = bytes.fromhex(encrypted_known_hex)
        keystream = bytes(a ^ b for a, b in zip(known, encrypted_known[:-16]))

        # Decrypt flag
        flag_bytes = bytes(a ^ b for a, b in zip(encrypted_flag[:-16], keystream))
        flag = flag_bytes.decode()
        print("Flag:", flag)
    else:
        print("Failed to get encrypted known")
else:
    print("Failed to get encrypted flag")

sock.close()