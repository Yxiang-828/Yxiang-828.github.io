Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.



Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]
Example 2:

Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]



is there a pattern to this?

you just need to keep track of the direction you are going in
here's how to do it:
firstly, you need to define the boundaries of the matrix and the direction of traversal (upward or downward). You can use a variable to keep track of the current position in the matrix and another variable to indicate the current direction.

class Solution {
public:
    vector<int> findDiagonalOrder(vector<vector<int>>& mat) {
        int m=mat.size();
        int n=mat[0].size();
        int direction=0; //0 is up, 1 is down
        vector<int> tracker;
        vector<int> position (2,0); //position[0] hori, position[1]=verti
        //direction=0 ==> position[0] increase, position[1] decrease
        //direction=1 ==> position[1] increase, position[0] decrease

        while(direction==0 && position[0] < m && position[1]>=0){
            
        }
        while(direction==1 && position[1] < n && position[0]>=0){
        }
    }
};