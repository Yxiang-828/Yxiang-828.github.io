module top_module(
    input [6:0] sw,          // Input A (7-bit)
    input [6:0] sw2,         // Input B (7-bit)
    input btn,               // Push button
    output [6:0] led,        // LED outputs (7-bit)
    output [3:0] an,         // 7-seg anodes
    output [7:0] seg         // 7-seg segments
);

    // Parallel adder result
    wire [6:0] DR;

    // Alternate result (DR * 8)
    wire [6:0] AR;

    // Instantiate 7-bit adder
    my_7_bit_adder adder_7bit (sw, sw2, DR);

    // Multiply DR by 8 (shift left by 3)
    assign AR = {DR[3:0], 3'b000};

    // MUX: select DR when btn=0, AR when btn=1
    assign led = btn ? AR : DR;

    // 7-seg display signals
    wire [7:0] pattern;
    wire [3:0] anodes_init;

    assign pattern = 8'b10101000;   // Example segment pattern
    assign anodes_init = 4'b1000;   // Enable rightmost digit
    assign an = btn ? ~anodes_init : anodes_init;
    assign seg = pattern;

endmodule





`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 31.08.2025 13:01:00
// Design Name:
// Module Name: adder
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

//1-bit Full Adder
module my_full_adder(input A, input B, input C0, output S, output C1);
    assign S = A ^ B ^ C0;
    assign C1 = (A & B) | (C0 & (A | B));
endmodule

// 2-bit Parallel Adder (for most significant bits)
module my_2_bit_adder(input [1:0] A, input [1:0] B, input C0, output [1:0] S, output C2);
    wire C1;
    my_full_adder fa0 (A[0], B[0], C0, S[0], C1);
    my_full_adder fa1 (A[1], B[1], C1, S[1], C2);
endmodule

// 5-bit Parallel Adder (for least significant bits)
module my_5_bit_adder(input [4:0] A, input [4:0] B, input C0, output [4:0] S, output C5);
    wire C1, C2, C3, C4;
    my_full_adder fa0 (A[0], B[0], C0, S[0], C1);
    my_full_adder fa1 (A[1], B[1], C1, S[1], C2);
    my_full_adder fa2 (A[2], B[2], C2, S[2], C3);
    my_full_adder fa3 (A[3], B[3], C3, S[3], C4);
    my_full_adder fa4 (A[4], B[4], C4, S[4], C5);
endmodule

// Complete 7-bit Parallel Adder
module my_7_bit_adder(input [6:0] A, input [6:0] B, output [6:0] DR);
    wire carry_between;
    wire [4:0] sum_lsb;
    wire [1:0] sum_msb;

    // Least significant 5 bits (no carry in, has carry out)
    my_5_bit_adder lsb_adder (A[4:0], B[4:0], 1'b0, sum_lsb, carry_between);

    // Most significant 2 bits (has carry in, no carry out needed)
    wire carry_out_unused;
    my_2_bit_adder msb_adder (A[6:5], B[6:5], carry_between, sum_msb, carry_out_unused);

    // Combine results
    assign DR = {sum_msb, sum_lsb};
endmodule
